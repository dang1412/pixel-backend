// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CharacterAttrsFbs } from './character-attrs-fbs';


export class PixelShooterUpdatesFbs {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PixelShooterUpdatesFbs {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPixelShooterUpdatesFbs(bb:flatbuffers.ByteBuffer, obj?:PixelShooterUpdatesFbs):PixelShooterUpdatesFbs {
  return (obj || new PixelShooterUpdatesFbs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPixelShooterUpdatesFbs(bb:flatbuffers.ByteBuffer, obj?:PixelShooterUpdatesFbs):PixelShooterUpdatesFbs {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PixelShooterUpdatesFbs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

updateIds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb!.__vector(this.bb_pos + offset) + index * 2) : 0;
}

updateIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

updateIdsArray():Int16Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Int16Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

updates(index: number, obj?:CharacterAttrsFbs):CharacterAttrsFbs|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new CharacterAttrsFbs()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 10, this.bb!) : null;
}

updatesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fireIds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb!.__vector(this.bb_pos + offset) + index * 2) : 0;
}

fireIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fireIdsArray():Int16Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Int16Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

deadIds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt16(this.bb!.__vector(this.bb_pos + offset) + index * 2) : 0;
}

deadIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

deadIdsArray():Int16Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Int16Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startPixelShooterUpdatesFbs(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addUpdateIds(builder:flatbuffers.Builder, updateIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, updateIdsOffset, 0);
}

static createUpdateIdsVector(builder:flatbuffers.Builder, data:number[]|Int16Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createUpdateIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createUpdateIdsVector(builder:flatbuffers.Builder, data:number[]|Int16Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(2, data.length, 2);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt16(data[i]!);
  }
  return builder.endVector();
}

static startUpdateIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(2, numElems, 2);
}

static addUpdates(builder:flatbuffers.Builder, updatesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, updatesOffset, 0);
}

static startUpdatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(10, numElems, 2);
}

static addFireIds(builder:flatbuffers.Builder, fireIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, fireIdsOffset, 0);
}

static createFireIdsVector(builder:flatbuffers.Builder, data:number[]|Int16Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createFireIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createFireIdsVector(builder:flatbuffers.Builder, data:number[]|Int16Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(2, data.length, 2);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt16(data[i]!);
  }
  return builder.endVector();
}

static startFireIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(2, numElems, 2);
}

static addDeadIds(builder:flatbuffers.Builder, deadIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, deadIdsOffset, 0);
}

static createDeadIdsVector(builder:flatbuffers.Builder, data:number[]|Int16Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createDeadIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createDeadIdsVector(builder:flatbuffers.Builder, data:number[]|Int16Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(2, data.length, 2);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt16(data[i]!);
  }
  return builder.endVector();
}

static startDeadIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(2, numElems, 2);
}

static endPixelShooterUpdatesFbs(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPixelShooterUpdatesFbsBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedPixelShooterUpdatesFbsBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createPixelShooterUpdatesFbs(builder:flatbuffers.Builder, updateIdsOffset:flatbuffers.Offset, updatesOffset:flatbuffers.Offset, fireIdsOffset:flatbuffers.Offset, deadIdsOffset:flatbuffers.Offset):flatbuffers.Offset {
  PixelShooterUpdatesFbs.startPixelShooterUpdatesFbs(builder);
  PixelShooterUpdatesFbs.addUpdateIds(builder, updateIdsOffset);
  PixelShooterUpdatesFbs.addUpdates(builder, updatesOffset);
  PixelShooterUpdatesFbs.addFireIds(builder, fireIdsOffset);
  PixelShooterUpdatesFbs.addDeadIds(builder, deadIdsOffset);
  return PixelShooterUpdatesFbs.endPixelShooterUpdatesFbs(builder);
}
}
